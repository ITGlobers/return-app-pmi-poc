type Query {
  returnAppSettings: ReturnAppSettings @cacheControl(maxAge: ZERO)
  @auth(scope: PUBLIC)
  categoryTreeName: [CategoryInfo]! @cacheControl(maxAge: MEDIUM)
  @auth(scope: PUBLIC)
  """
  storeUserEmail: If not passed, resolver will try to parse it from session cookie.
  """
  ordersAvailableToReturn(
    page: Int!
    storeUserEmail: String
  ): OrdersToReturnList
    @withUserProfile
    @cacheControl(scope: PRIVATE, maxAge: SHORT)
    @auth(scope: PUBLIC)
  """
  storeUserEmail: If not passed, resolver will try to parse it from session cookie.
  """
  orderToReturnSummary(
    orderId: ID!
    storeUserEmail: String
  ): OrderToReturnSummary
    @withUserProfile
    @cacheControl(scope: PRIVATE, maxAge: SHORT)
    @auth(scope: PUBLIC)
  returnRequest(requestId: ID!): ReturnRequestResponse
    @withUserProfile
    @cacheControl(scope: PRIVATE, maxAge: SHORT)
    @auth(scope: PUBLIC)
  returnRequestList(
    filter: ReturnRequestFilters
    page: Int!
    perPage: Int
  ): ReturnRequestList
    @withUserProfile
    @cacheControl(scope: PRIVATE, maxAge: SHORT)
    @auth(scope: PUBLIC)
  nearestPickupPoints(lat: String!, long: String!): NearPickupPointQueryResponse
  @auth(scope: PUBLIC)
  """
  productsAvailableForIndependentReturn: Search products that the user has purchased in any previous order.
  Returns only SKUs that the user actually bought, enabling independent returns without orderId.
  PMI Feature: Allows returns decoupled from specific orders.
  """
  productsAvailableForIndependentReturn(
    searchTerm: String
    storeUserEmail: String
  ): [ProductSummary!]!
    @withUserProfile
    @cacheControl(scope: PRIVATE, maxAge: SHORT)
    @auth(scope: PUBLIC)
}

type Mutation {
  createReturnRequest(returnRequest: ReturnRequestInput!): returnRequestCreated
    @withUserProfile
    @auth(scope: PUBLIC)
  saveReturnAppSettings(settings: ReturnAppSettingsInput!): Boolean
  @auth(scope: PUBLIC)
  updateReturnRequestStatus(
    requestId: ID!
    status: Status!
    comment: ReturnRequestCommentInput
    refundData: RefundDataInput
  ): ReturnRequestResponse @withUserProfile
  @auth(scope: PUBLIC)
}